import requests
import pyupbit
import matplotlib.pyplot as plt
import time
import datetime
import pandas as pd
from logging.config import dictConfig
import logging
import numpy as np




def atr(Data, atr_lookback, high, low, close, whereTR, whereATR):

    # TR
    for i in range(len(Data)):

        Data[i, whereTR] = max(Data[i, high] - Data[i, low],
                               abs(Data[i, high] - Data[i - 1, close]),
                               abs(Data[i, low] - Data[i - 1, close]))

    Data[0, whereATR] = Data[0, high] - Data[0, low]

    Data[atr_lookback - 1, whereATR] = Data[0:atr_lookback - 1,  whereTR].mean()

    first_atr = Data[0, whereATR]

    for i in range(len(Data)):

        Data[0, whereATR] = first_atr

        Data[i, whereATR] = (((Data[i - 1, whereATR] * (atr_lookback - 1)) + Data[i, whereTR]) / atr_lookback)

    return Data


def eATR(Data, atr_lookback, high, low, close, whereTR):
    # TR
    for i in range(len(Data)):
        try:
            Data[i, whereTR] = max(Data[i, high] - Data[i, low],
                                                   abs(Data[i, high] - Data[i - 1, close]),
            abs(Data[i, low] - Data[i - 1, close]))

        except ValueError:
            pass


    Data[0, whereTR] = 0
    Data = ema(Data, 2, atr_lookback, whereTR, whereTR + 1, whereTR + 2)
    return Data


def supertrend(Data, multiplier, lookback):
    for i in range(len(Data)):
        # Average Price
        Data[i, 5] = (Data[i, 1] + Data[i, 2]) / 2
        # Basic Upper Band
        Data[i, 6] = Data[i, 5] + (multiplier * Data[i, 4])
        # Lower Upper Band
        Data[i, 7] = Data[i, 5] - (multiplier * Data[i, 4])

    # Final Upper Band
    for i in range(len(Data)):

        if i == 0:
            Data[i, 8] = 0

        else:
            if (Data[i, 6] < Data[i - 1, 8]) or (Data[i - 1, 3] > Data[i - 1, 8]):
                Data[i, 8] = Data[i, 6]

            else:
                Data[i, 8] = Data[i - 1, 8]

    # Final Lower Band
    for i in range(len(Data)):

        if i == 0:
            Data[i, 9] = 0

        else:
            if (Data[i, 7] > Data[i - 1, 9]) or (Data[i - 1, 3] < Data[i - 1, 9]):
                Data[i, 9] = Data[i, 7]

            else:
                Data[i, 9] = Data[i - 1, 9]

    # SuperTrend
    for i in range(len(Data)):

        if i == 0:
            Data[i, 10] = 0

        elif (Data[i - 1, 10] == Data[i - 1, 8]) and (Data[i, 3] <= Data[i, 8]):
            Data[i, 10] = Data[i, 8]

        elif (Data[i - 1, 10] == Data[i - 1, 8]) and (Data[i, 3] > Data[i, 8]):
            Data[i, 10] = Data[i, 9]

        elif (Data[i - 1, 10] == Data[i - 1, 9]) and (Data[i, 3] >= Data[i, 9]):
            Data[i, 10] = Data[i, 9]

        elif (Data[i - 1, 10] == Data[i - 1, 9]) and (Data[i, 3] < Data[i, 9]):
            Data[i, 10] = Data[i, 8]

    return Data


Data = pyupbit.get_ohlcv("KRW-BTC", "minute5")
# supertrend(Data,2,7)


df = pyupbit.get_ohlcv("KRW-BTC")
df.tail()

# True Range = Max( Abs(High-Low), Abs(Previous Close - High), Abs(Previous Close - Low))


df['pclose'] = df['close'].shift(1)
df['diff1'] = abs(df['high'] - df['low'])
df['diff2'] = abs(df['pclose'] - df['high'])
df['diff3'] = abs(df['pclose'] - df['low'])
df['TR'] = df[['diff1', 'diff2', 'diff3']].max(axis=1)
print(df)

# N = (19 * PDN + TR) / 20
# PDN: 이전 거래일의 N
# TR: 현재 거래일의 N


data = np.array(df['TR'])    # no previous day's N
for i in range(1, len(df)):
    data[i] = (19 * data[i-1] + df['TR'].iloc[i]) / 20

df['N'] = data
print(data)
