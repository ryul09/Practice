import requests
import pyupbit
import matplotlib.pyplot as plt
import time
import datetime
import pandas as pd
from logging.config import dictConfig
import logging
import numpy as np

## Log 남기기
dictConfig({
    'version': 1,
    'formatters': {
        'default': {
            'format': '[%(asctime)s] %(message)s',
        }
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'debug.log',
            'formatter': 'default',
        },
    },
    'root': {
        'level': 'DEBUG',
        'handlers': ['file']
    }
})


# 1. 매수 Target 구하기 -> target_ticker_list
def cal_target(tickers):
    for i in tickers:
        df = pyupbit.get_ohlcv(i, "minute1", count = 2)
        now_minute = df.iloc[0]
        # print(now_minute)
        target = now_minute['open'] * mesu_target
        target_volume = now_minute['close'] * now_minute['volume']
        # if now_minute['close'] >= target and target_volume >= volume_target:
        if now_minute['close'] >= target and target_volume >= volume_target:
            target_ticker_list.append(i)
            print("%s target을 추가하였습니다." % target_ticker_list)
        else:
            print("target을 찾고 있습니다.")

        time.sleep(0.3)
    return target

## 0. 객체 생성
f = open("upbit.txt")
lines = f.readlines()
access = lines[0].strip()
secret = lines[1].strip()
f.close()
upbit = pyupbit.Upbit(access,secret)

## 변수 설정
# op_mode = False  ## 동작 상태, True : 동작 조건 만족 -> 가능, False : 동작 조건 불만족 -> 불가능
# hold = False  ## 보유 상태, True : 코인 보유 중 -> 매도 가능, False : 코인 미보유 중 -> 매수 가능

# tickers = pyupbit.get_tickers(fiat="KRW")
tickers = ["KRW-BTC", "KRW-ETH", "KRW-NEO", "KRW-MTL", "KRW-LTC", "KRW-ETC", "KRW-OMG", "KRW-WAVES", "KRW-XEM", "KRW-QTUM", "KRW-LSK", "KRW-STEEM", "KRW-XLM", "KRW-ARDR", "KRW-KMD", "KRW-ARK", "KRW-STORJ", "KRW-REP", "KRW-EMC2", "KRW-ADA", "KRW-SBD", "KRW-POWR", "KRW-BTG", "KRW-ICX", "KRW-EOS", "KRW-TRX", "KRW-SC", "KRW-ONT",  "KRW-POLY", "KRW-ZRX", "KRW-LOOM", "KRW-BCH", "KRW-BAT", "KRW-IOST", "KRW-DMT", "KRW-CVC", "KRW-IQ", "KRW-IOTA", "KRW-ONG", "KRW-GAS", "KRW-ELF", "KRW-KNC", "KRW-BSV", "KRW-THETA", "KRW-EDR", "KRW-QKC", "KRW-BTT", "KRW-ENJ", "KRW-TFUEL", "KRW-MANA", "KRW-AERGO", "KRW-ATOM", "KRW-SOLVE", "KRW-WAXP", "KRW-HBAR", "KRW-MED", "KRW-MLK", "KRW-STPT",  "KRW-CHZ", "KRW-PXL", "KRW-STMX", "KRW-DKA", "KRW-HIVE", "KRW-KAVA", "KRW-LINK", "KRW-XTZ", "KRW-BORA", "KRW-JST", "KRW-TON", "KRW-SXP", "KRW-LAMB", "KRW-HUNT", "KRW-MARO", "KRW-PLA", "KRW-DOT", "KRW-SRM", "KRW-MVL", "KRW-PCI", "KRW-STRAX", "KRW-AQT", "KRW-BCHA", "KRW-GLM", "KRW-QTCON", "KRW-SSX", "KRW-OBSR", "KRW-CBK", "KRW-SAND", "KRW-DOGE", "KRW-STRK", "KRW-PUNDIX", "KRW-FLOW", "KRW-DAWN", "KRW-AXS"]

target_ticker_list = [] # 매수 가능 Target list
mesu_target = 1.012
medo_target = 1.02
medo_target_sonjul = 0.97
volume_target = 100000000
target_rank_list = {}

krw_balance = upbit.get_balance("KRW")


op_mode = True
hold = False


while True:
    now = datetime.datetime.now()
    target_ticker_list = []

    if krw_balance !=0:
        op_mode = True
        hold = False

    if now.hour == 8 and 58<= now.minute <= 59 and 30 <= now.second <= 59:
        time.sleep(150)

    ## 매수
    if op_mode is True and hold is False:
        target = cal_target(tickers)
        if target_ticker_list == []:
            continue
        print(target_ticker_list)

        logging.debug("mesu_target : %s, target list : %s" % (mesu_target, target_ticker_list))

        dfs = []
        dfs1 = []
        dfs2 = []
        krw_balance = upbit.get_balance("KRW")
        logging.debug("KRW 금액 : %s" % krw_balance)

        for i in target_ticker_list:
            df2 = pyupbit.get_ohlcv(i, "minute5", count=2)

            for a in range(1, len(df2.close)):
                df2['change_rate'] = df2.close[a] / df2.close[a - 1]
                break
            # dfs = df2.iloc[-1,-1]
            # print(df2)
            dfs = df2.iloc[:, 5:6].copy()
            # print(dfs)

            dfs['ticker'] = pd.Series([i, i], index=dfs.index)
            dfs1.append(dfs)

            time.sleep(0.05)

        dfs2 = pd.concat(dfs1)
        # dfs2 = df2.sort_index()
        print(dfs2)

        find_a = []

        dfs2['change_rate_rank'] = dfs2['change_rate'].rank(method='min', ascending=False)
        dfs2['change_rate_rank'] = dfs2['change_rate_rank'].astype(int)
        dfs2.sort_values(by='change_rate_rank', axis=0, ascending=True, inplace=True)

        print(dfs2)
        find_a = dfs2.iloc[0]
        # print(find_a)

        print(find_a['ticker'])
        logging.debug("target list(rank) : %s(%s)" % (find_a['ticker'], find_a['change_rate']))
    # print("Ticker:%s, 시가:%s, 고가:%s, 변화율:%s" % (i, df2["open"], df2["high"],df2["change_rate"]))


        krw_balance = upbit.get_balance("KRW")
        upbit.buy_market_order(find_a['ticker'], krw_balance*0.99949)
        print(upbit.buy_market_order(find_a['ticker'], krw_balance*0.99949))
        hold = True
        # mesu_price = upbit.get_balance(find_a['ticker'])

        mesu_price = pyupbit.get_current_price(find_a['ticker'])
        # print(now, target_price)
        print(f"현재시간: {now} 목표가:{target} 현재가: {mesu_price} 보유상태: {hold} 동작상태: {op_mode}")
        logging.debug("%s 를 매수 했습니다. (%s)" % (find_a['ticker'],mesu_price ))

    ## 매도 시도
    if op_mode is True and hold is True:
        time.sleep(1)
        upbit.get_balance(find_a['ticker'])
        print(upbit.get_balance(find_a['ticker']))
        target_balance = upbit.get_balance(find_a['ticker'])


        ## 목표 도달 시 바로 매도

        while True:
            now_price = pyupbit.get_current_price(find_a['ticker'])

            # if medo_minute['close'] <= target_medo and target_volume_medo >= volume_target :
            if now_price >= mesu_price * medo_target or now_price <= mesu_price * medo_target_sonjul  :
                upbit.sell_market_order(find_a['ticker'], target_balance)
                print(upbit.sell_market_order(find_a['ticker'], target_balance))

                krw_balance = upbit.get_balance("KRW")
                medo_price = pyupbit.get_current_price(find_a['ticker'])
                print("%s를 매도하였습니다." % find_a['ticker'])

                logging.debug("%s 를 매도 했습니다. 판매 금액: %s, 수익:%s" % (find_a['ticker'], medo_price, medo_price/mesu_price))
                time.sleep(5)
                break

            target_balance = upbit.get_balance(find_a['ticker'])
            if target_balance == 0:
                time.sleep(5)
                break

            else:
                print("매도 target을 찾고 있습니다.")
                time.sleep(0.3)
                continue

        hold = False



        # 특정 매도 기준
        # while True:
        #     df3 = pyupbit.get_ohlcv(find_a['ticker'], "minute1", count=2)
        #
        #     medo_minute = df3.iloc[0]
        #     # print(medo_minute)
        #
        #     target_medo = medo_minute['open'] * medo_target
        #     target_volume_medo = medo_minute['close']*medo_minute['volume']
        #
        #
        #     # if medo_minute['close'] <= target_medo and target_volume_medo >= volume_target :
        #     if medo_minute['close'] <= target_medo and medo_minute['close'] > mesu_price :
        #         upbit.sell_market_order(find_a['ticker'], target_balance)
        #         print(upbit.sell_market_order(find_a['ticker'], target_balance))
        #
        #         krw_balance = upbit.get_balance("KRW")
        #         medo_price = pyupbit.get_current_price(find_a['ticker'])
        #         print("%s를 매도하였습니다." % find_a['ticker'])
        #
        #         logging.debug("%s 를 매도 했습니다. 판매 금액: %s, 수익:%s" % (find_a['ticker'], medo_price, medo_price/mesu_price))
        #         time.sleep(5)
        #         break
        #
        #     target_balance = upbit.get_balance(find_a['ticker'])
        #     if target_balance == 0:
        #         time.sleep(5)
        #         break
        #
        #     else:
        #         print("매도 target을 찾고 있습니다.")
        #         time.sleep(3)
        #         continue
        #
        # hold = False

    op_mode = False
    time.sleep(10)

