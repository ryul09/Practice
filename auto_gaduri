import requests
import pyupbit
import matplotlib.pyplot as plt
import time
import datetime
import pandas as pd
from logging.config import dictConfig
import logging
import numpy as np
import sys

## Log 남기기
dictConfig({
    'version': 1,
    'formatters': {
        'default': {
            'format': '[%(asctime)s] %(message)s',
        }
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'debug_gaduri.log',
            'formatter': 'default',
        },
    },
    'root': {
        'level': 'DEBUG',
        'handlers': ['file']
    }
})


# 1. 매수 Target 구하기 -> target_ticker_list
tickers = pyupbit.get_tickers(fiat="KRW")

def cal_target(tickers):
    for i in tickers:
        df = pyupbit.get_ohlcv(i, time_interval, count =2)
        target = df.iloc[-1]

        if  bbh(i) / bbl(i)  <= bollinger_target:

            target_ticker_list.append(i)
            print("%s target을 추가하였습니다." % target_ticker_list)

        else:
            print("target을 찾고 있습니다.")

        time.sleep(0.35)
    return target_ticker_list


def low_price(ticker):
    df = pyupbit.get_ohlcv(ticker, interval=time_interval)
    low = df['low']
    ma = low.rolling(1).mean()
    return ma[-1]

def high_price(ticker):
    df = pyupbit.get_ohlcv(ticker, interval=time_interval)
    high = df['high']
    ma = low.rolling(1).mean()
    return ma[-1]

# 1.1 bolliger band 수식 (분봉)

def ma20(ticker):
    df = pyupbit.get_ohlcv(ticker, interval=time_interval)
    close = df['close']
    ma = close.rolling(20).mean()
    return ma[-1]

def bbl(ticker):
    df = pyupbit.get_ohlcv(ticker, interval=time_interval)
    df = df.iloc[:-1]
    today_close = pyupbit.get_current_price(ticker)
    one_day_ago = df.iloc[-2]
    one_day_ago_close = one_day_ago['close']
    two_days_ago = df.iloc[-3]
    two_days_ago_close = two_days_ago['close']
    three_days_ago = df.iloc[-4]
    three_days_ago_close = three_days_ago['close']
    four_days_ago = df.iloc[-5]
    four_days_ago_close = four_days_ago['close']
    five_days_ago = df.iloc[-6]
    five_days_ago_close = five_days_ago['close']
    six_days_ago = df.iloc[-7]
    six_days_ago_close = six_days_ago['close']
    seven_days_ago = df.iloc[-8]
    seven_days_ago_close = seven_days_ago['close']
    eight_days_ago = df.iloc[-9]
    eight_days_ago_close = eight_days_ago['close']
    nine_days_ago = df.iloc[-10]
    nine_days_ago_close = nine_days_ago['close']
    ten_days_ago = df.iloc[-11]
    ten_days_ago_close = ten_days_ago['close']
    eleven_days_ago = df.iloc[-12]
    eleven_days_ago_close = eleven_days_ago['close']
    twelve_days_ago = df.iloc[-13]
    twelve_days_ago_close = twelve_days_ago['close']
    thirteen_days_ago = df.iloc[-14]
    thirteen_days_ago_close = thirteen_days_ago['close']
    fourteen_days_ago = df.iloc[-15]
    fourteen_days_ago_close = fourteen_days_ago['close']
    fifteen_days_ago = df.iloc[-16]
    fifteen_days_ago_close = fifteen_days_ago['close']
    sixteen_days_ago = df.iloc[-17]
    sixteen_days_ago_close = sixteen_days_ago['close']
    seventeen_days_ago = df.iloc[-18]
    seventeen_days_ago_close = seventeen_days_ago['close']
    eighteen_days_ago = df.iloc[-19]
    eighteen_days_ago_close = eighteen_days_ago['close']
    nineteen_days_ago = df.iloc[-20]
    nineteen_days_ago_close = nineteen_days_ago['close']

    average = get_today_ma20(ticker)
    standard_deviation = (((today_close - average) ** 2 + (one_day_ago_close - average) ** 2 + (
                two_days_ago_close - average) ** 2 + (three_days_ago_close - average) ** 2 + (
                                       four_days_ago_close - average) ** 2 + (five_days_ago_close - average) ** 2 + (
                                       six_days_ago_close - average) ** 2 + (seven_days_ago_close - average) ** 2 + (
                                       eight_days_ago_close - average) ** 2 + (nine_days_ago_close - average) ** 2 + (
                                       ten_days_ago_close - average) ** 2 + (eleven_days_ago_close - average) ** 2 + (
                                       twelve_days_ago_close - average) ** 2 + (
                                       thirteen_days_ago_close - average) ** 2 + (
                                       fourteen_days_ago_close - average) ** 2 + (
                                       fifteen_days_ago_close - average) ** 2 + (
                                       sixteen_days_ago_close - average) ** 2 + (
                                       seventeen_days_ago_close - average) ** 2 + (
                                       eighteen_days_ago_close - average) ** 2 + (
                                       nineteen_days_ago_close - average) ** 2) / 20) ** (1 / 2)
    today_bollinger_band_lower_line = average - standard_deviation * 2

    return today_bollinger_band_lower_line

def bbl_previous(ticker):
    df = pyupbit.get_ohlcv(ticker, interval=time_interval)
    df = df.iloc[:-2]
    today_close = pyupbit.get_current_price(ticker)
    one_day_ago = df.iloc[-2]
    one_day_ago_close = one_day_ago['close']
    two_days_ago = df.iloc[-3]
    two_days_ago_close = two_days_ago['close']
    three_days_ago = df.iloc[-4]
    three_days_ago_close = three_days_ago['close']
    four_days_ago = df.iloc[-5]
    four_days_ago_close = four_days_ago['close']
    five_days_ago = df.iloc[-6]
    five_days_ago_close = five_days_ago['close']
    six_days_ago = df.iloc[-7]
    six_days_ago_close = six_days_ago['close']
    seven_days_ago = df.iloc[-8]
    seven_days_ago_close = seven_days_ago['close']
    eight_days_ago = df.iloc[-9]
    eight_days_ago_close = eight_days_ago['close']
    nine_days_ago = df.iloc[-10]
    nine_days_ago_close = nine_days_ago['close']
    ten_days_ago = df.iloc[-11]
    ten_days_ago_close = ten_days_ago['close']
    eleven_days_ago = df.iloc[-12]
    eleven_days_ago_close = eleven_days_ago['close']
    twelve_days_ago = df.iloc[-13]
    twelve_days_ago_close = twelve_days_ago['close']
    thirteen_days_ago = df.iloc[-14]
    thirteen_days_ago_close = thirteen_days_ago['close']
    fourteen_days_ago = df.iloc[-15]
    fourteen_days_ago_close = fourteen_days_ago['close']
    fifteen_days_ago = df.iloc[-16]
    fifteen_days_ago_close = fifteen_days_ago['close']
    sixteen_days_ago = df.iloc[-17]
    sixteen_days_ago_close = sixteen_days_ago['close']
    seventeen_days_ago = df.iloc[-18]
    seventeen_days_ago_close = seventeen_days_ago['close']
    eighteen_days_ago = df.iloc[-19]
    eighteen_days_ago_close = eighteen_days_ago['close']
    nineteen_days_ago = df.iloc[-20]
    nineteen_days_ago_close = nineteen_days_ago['close']

    average = get_today_ma20(ticker)
    standard_deviation = (((today_close - average) ** 2 + (one_day_ago_close - average) ** 2 + (
                two_days_ago_close - average) ** 2 + (three_days_ago_close - average) ** 2 + (
                                       four_days_ago_close - average) ** 2 + (five_days_ago_close - average) ** 2 + (
                                       six_days_ago_close - average) ** 2 + (seven_days_ago_close - average) ** 2 + (
                                       eight_days_ago_close - average) ** 2 + (nine_days_ago_close - average) ** 2 + (
                                       ten_days_ago_close - average) ** 2 + (eleven_days_ago_close - average) ** 2 + (
                                       twelve_days_ago_close - average) ** 2 + (
                                       thirteen_days_ago_close - average) ** 2 + (
                                       fourteen_days_ago_close - average) ** 2 + (
                                       fifteen_days_ago_close - average) ** 2 + (
                                       sixteen_days_ago_close - average) ** 2 + (
                                       seventeen_days_ago_close - average) ** 2 + (
                                       eighteen_days_ago_close - average) ** 2 + (
                                       nineteen_days_ago_close - average) ** 2) / 20) ** (1 / 2)
    today_bollinger_band_lower_line = average - standard_deviation * 2

    return today_bollinger_band_lower_line

def bbh(ticker):
    df = pyupbit.get_ohlcv(ticker, interval=time_interval)
    df = df.iloc[:-1]
    today_close = pyupbit.get_current_price(ticker)
    one_day_ago = df.iloc[-2]
    one_day_ago_close = one_day_ago['close']
    two_days_ago = df.iloc[-3]
    two_days_ago_close = two_days_ago['close']
    three_days_ago = df.iloc[-4]
    three_days_ago_close = three_days_ago['close']
    four_days_ago = df.iloc[-5]
    four_days_ago_close = four_days_ago['close']
    five_days_ago = df.iloc[-6]
    five_days_ago_close = five_days_ago['close']
    six_days_ago = df.iloc[-7]
    six_days_ago_close = six_days_ago['close']
    seven_days_ago = df.iloc[-8]
    seven_days_ago_close = seven_days_ago['close']
    eight_days_ago = df.iloc[-9]
    eight_days_ago_close = eight_days_ago['close']
    nine_days_ago = df.iloc[-10]
    nine_days_ago_close = nine_days_ago['close']
    ten_days_ago = df.iloc[-11]
    ten_days_ago_close = ten_days_ago['close']
    eleven_days_ago = df.iloc[-12]
    eleven_days_ago_close = eleven_days_ago['close']
    twelve_days_ago = df.iloc[-13]
    twelve_days_ago_close = twelve_days_ago['close']
    thirteen_days_ago = df.iloc[-14]
    thirteen_days_ago_close = thirteen_days_ago['close']
    fourteen_days_ago = df.iloc[-15]
    fourteen_days_ago_close = fourteen_days_ago['close']
    fifteen_days_ago = df.iloc[-16]
    fifteen_days_ago_close = fifteen_days_ago['close']
    sixteen_days_ago = df.iloc[-17]
    sixteen_days_ago_close = sixteen_days_ago['close']
    seventeen_days_ago = df.iloc[-18]
    seventeen_days_ago_close = seventeen_days_ago['close']
    eighteen_days_ago = df.iloc[-19]
    eighteen_days_ago_close = eighteen_days_ago['close']
    nineteen_days_ago = df.iloc[-20]
    nineteen_days_ago_close = nineteen_days_ago['close']

    average = get_today_ma20(ticker)
    standard_deviation = (((today_close - average) ** 2 + (one_day_ago_close - average) ** 2 + (
                two_days_ago_close - average) ** 2 + (three_days_ago_close - average) ** 2 + (
                                       four_days_ago_close - average) ** 2 + (five_days_ago_close - average) ** 2 + (
                                       six_days_ago_close - average) ** 2 + (seven_days_ago_close - average) ** 2 + (
                                       eight_days_ago_close - average) ** 2 + (nine_days_ago_close - average) ** 2 + (
                                       ten_days_ago_close - average) ** 2 + (eleven_days_ago_close - average) ** 2 + (
                                       twelve_days_ago_close - average) ** 2 + (
                                       thirteen_days_ago_close - average) ** 2 + (
                                       fourteen_days_ago_close - average) ** 2 + (
                                       fifteen_days_ago_close - average) ** 2 + (
                                       sixteen_days_ago_close - average) ** 2 + (
                                       seventeen_days_ago_close - average) ** 2 + (
                                       eighteen_days_ago_close - average) ** 2 + (
                                       nineteen_days_ago_close - average) ** 2) / 20) ** (1 / 2)
    today_bollinger_band_higher_line = average + standard_deviation * 2

    return today_bollinger_band_higher_line

def bbh_previous(ticker):
    df = pyupbit.get_ohlcv(ticker, interval=time_interval)
    df = df.iloc[:-2]
    today_close = pyupbit.get_current_price(ticker)
    one_day_ago = df.iloc[-2]
    one_day_ago_close = one_day_ago['close']
    two_days_ago = df.iloc[-3]
    two_days_ago_close = two_days_ago['close']
    three_days_ago = df.iloc[-4]
    three_days_ago_close = three_days_ago['close']
    four_days_ago = df.iloc[-5]
    four_days_ago_close = four_days_ago['close']
    five_days_ago = df.iloc[-6]
    five_days_ago_close = five_days_ago['close']
    six_days_ago = df.iloc[-7]
    six_days_ago_close = six_days_ago['close']
    seven_days_ago = df.iloc[-8]
    seven_days_ago_close = seven_days_ago['close']
    eight_days_ago = df.iloc[-9]
    eight_days_ago_close = eight_days_ago['close']
    nine_days_ago = df.iloc[-10]
    nine_days_ago_close = nine_days_ago['close']
    ten_days_ago = df.iloc[-11]
    ten_days_ago_close = ten_days_ago['close']
    eleven_days_ago = df.iloc[-12]
    eleven_days_ago_close = eleven_days_ago['close']
    twelve_days_ago = df.iloc[-13]
    twelve_days_ago_close = twelve_days_ago['close']
    thirteen_days_ago = df.iloc[-14]
    thirteen_days_ago_close = thirteen_days_ago['close']
    fourteen_days_ago = df.iloc[-15]
    fourteen_days_ago_close = fourteen_days_ago['close']
    fifteen_days_ago = df.iloc[-16]
    fifteen_days_ago_close = fifteen_days_ago['close']
    sixteen_days_ago = df.iloc[-17]
    sixteen_days_ago_close = sixteen_days_ago['close']
    seventeen_days_ago = df.iloc[-18]
    seventeen_days_ago_close = seventeen_days_ago['close']
    eighteen_days_ago = df.iloc[-19]
    eighteen_days_ago_close = eighteen_days_ago['close']
    nineteen_days_ago = df.iloc[-20]
    nineteen_days_ago_close = nineteen_days_ago['close']

    average = get_today_ma20(ticker)
    standard_deviation = (((today_close - average) ** 2 + (one_day_ago_close - average) ** 2 + (
                two_days_ago_close - average) ** 2 + (three_days_ago_close - average) ** 2 + (
                                       four_days_ago_close - average) ** 2 + (five_days_ago_close - average) ** 2 + (
                                       six_days_ago_close - average) ** 2 + (seven_days_ago_close - average) ** 2 + (
                                       eight_days_ago_close - average) ** 2 + (nine_days_ago_close - average) ** 2 + (
                                       ten_days_ago_close - average) ** 2 + (eleven_days_ago_close - average) ** 2 + (
                                       twelve_days_ago_close - average) ** 2 + (
                                       thirteen_days_ago_close - average) ** 2 + (
                                       fourteen_days_ago_close - average) ** 2 + (
                                       fifteen_days_ago_close - average) ** 2 + (
                                       sixteen_days_ago_close - average) ** 2 + (
                                       seventeen_days_ago_close - average) ** 2 + (
                                       eighteen_days_ago_close - average) ** 2 + (
                                       nineteen_days_ago_close - average) ** 2) / 20) ** (1 / 2)
    today_bollinger_band_higher_line = average + standard_deviation * 2

    return today_bollinger_band_higher_line

## 0. 객체 생성
f = open("upbit.txt")
lines = f.readlines()
access = lines[0].strip()
secret = lines[1].strip()
f.close()
upbit = pyupbit.Upbit(access,secret)

## 변수 설정
# op_mode = False  ## 동작 상태, True : 동작 조건 만족 -> 가능, False : 동작 조건 불만족 -> 불가능
# hold = False  ## 보유 상태, True : 코인 보유 중 -> 매도 가능, False : 코인 미보유 중 -> 매수 가능

tickers = pyupbit.get_tickers(fiat="KRW")
target_ticker_list = [] # 매수 가능 Target list
find_ticker = [] # 매수 했던 coin 찾기
bollinger_target = 1.05 # bollinger_target range 가 해당 값 이내의 타겟
range_target = 3 # 범위 설정(%)
medo_target = 1.03 # 매수 no. 기준 매도 target 값
time_interval = "minute60"
mesu_check_time = "minute3"
mesu_percentage = 0.1  #10% 분할 매수
mesu_target_range = np.trunc(range_target/200 * mesu_percentage * 10000) / 10000 # 매수 구간 비율 간격(소수점 넷째자리)
slippage = 0.02
mod = sys.modules[__name__]
mesu_1 = False
mesu_2 = False
mesu_3 = False
mesu_4 = False
mesu_5 = False
mesu_6 = False
mesu_7 = False
mesu_8 = False
mesu_9 = False
mesu_10 = False
val = int((1 / mesu_percentage) + 1)


mesu_target = 1.008
mesu_target_except = 1.022

ikjul_target = 0.984
medo_target_susuryo = 1.005
volume_target = 100000000
target_rank_list = {}

krw_balance = upbit.get_balance("KRW")


op_mode = True #매수 가능
hold = False #매수 가능


while True:
    now = datetime.datetime.now()
    target_ticker_list = []
    krw_balance = upbit.get_balance("KRW")


    if now.hour == 8 and 58<= now.minute <= 59 and 1 <= now.second <= 59:
        time.sleep(150)

    ## 매수
    if op_mode is True and hold is False:
        target_ticker_list = cal_target(tickers)
        if target_ticker_list == []:
            continue
        print(target_ticker_list)

        logging.debug("target list : %s" % target_ticker_list)

        dfs = []
        dfs1 = []
        dfs2 = []
        krw_balance = upbit.get_balance("KRW")
        logging.debug("KRW 금액 : %s" % krw_balance)

        for i in target_ticker_list:
            df2 = pyupbit.get_ohlcv(i, time_interval, count=1)
            # print(df3)
            # for a in range(1, len(df3.close)):
            #     df3['change_rate'] = df3.close[a] / df3.close[a - 1]
            #     break
            df2['volume_amount'] = df2['close'] * df2['volume']
            # dfs = df2.iloc[-1,-1]
            # print(df2)
            dfs = df2.iloc[:, 5:6].copy()
            # print(dfs)

            dfs['ticker'] = pd.Series([i], index=dfs.index)
            dfs1.append(dfs)

            time.sleep(0.05)

        dfs2 = pd.concat(dfs1)
        # dfs2 = df3.sort_index()
        # print(dfs2)

        find_a = []

        dfs2['volume_amount_rank'] = dfs2['volume_amount'].rank(method='min', ascending=False)
        dfs2['volume_amount_rank'] = dfs2['volume_amount_rank'].astype(int)
        dfs2.sort_values(by='volume_amount_rank', axis=0, ascending=True, inplace=True)

        # print(dfs2)
        find_a = dfs2.iloc[0]
        # print(find_a)

        print(find_a['ticker'])
        mesu_find = find_a['ticker']
        logging.debug("target list(rank) : %s(%s)" % (find_a['ticker'], find_a['volume_amount']))
    # print("Ticker:%s, 시가:%s, 고가:%s, 변화율:%s" % (i, df2["open"], df2["high"],df2["change_rate"]))

        ## 매수, 매도 동시 시작
        while True:
            krw_balance = upbit.get_balance("KRW")
            balance = krw_balance * (1 - slippage)
            mesu_criteria = ma20(mesu_find) #기준값!


            for a in range(1,val):
                mesu_target_1 = mesu_criteria * (1 - mesu_target_range * a)

                medo_target_1 = mesu_criteria * (1 + mesu_target_range * a)
                medo_number = balance / mesu_percentage / mesu_target_1

                setattr(mod, 'buy_target_{}'.format(a), mesu_target_1)
                setattr(mod, 'buy_number_{}'.format(a), mesu_number)

                setattr(mod, 'sell_target_{}'.format(val-a), medo_target_1)
                setattr(mod, 'sell_number_{}'.format(val-a), medo_number)

            df3 = pyupbit.get_ohlcv(mesu_find, mesu_check_time, count=2)
            now_mesu = df3.iloc[0]


            if mesu_1 is False and buy_target_2 < now_mesu['close'] <= buy_target_1:
                upbit.buy_limit_order(mesu_find, buy_target_1, buy_number_1)
                print(upbit.buy_limit_order(mesu_find, buy_target_1, buy_number_1)

                while True:
                    if upbit.get_order(mesu_find) == {
                        'error': {'message': 'Jwt의 query를 검증하는데 실패하였습니다.', 'name': 'invalid_query_payload'}}:

                        print(
                            f"현재시간: {now} 목표가:{buy_target_1} ma20: {mesu_criteria} 보유 개수 : {buy_number_1} 형태 : {'매수1'}")
                        logging.debug("%s의 %s번째 target 매수 (현재가 : %s, ma20 : %s ) %s" % (
                            mesu_find, 1, buy_target_1, mesu_criteria, now))
                        mesu_1 = True
                        break
                    else:
                        print("매수 타겟 미체결")
                        time.sleep(1)

            if mesu_2 is False and buy_target_3 < now_mesu['close'] <= buy_target_2:
                upbit.buy_limit_order(mesu_find, buy_target_2, buy_number_2)
                print(upbit.buy_limit_order(mesu_find, buy_target_2, buy_number_2)
                while True:
                    if upbit.get_order(mesu_find) == {
                        'error': {'message': 'Jwt의 query를 검증하는데 실패하였습니다.', 'name': 'invalid_query_payload'}}:

                        print(
                            f"현재시간: {now} 목표가:{buy_target_2} ma20: {mesu_criteria} 보유 개수 : {buy_number_2} 형태 : {'매수2'}")
                        logging.debug("%s의 %s번째 target 매수 (현재가 : %s, ma20 : %s ) %s" % (
                            mesu_find, 2, buy_target_2, mesu_criteria, now))
                        mesu_2 = True
                        break
                    else:
                        print("매수 타겟 미체결")
                        time.sleep(1)

            if mesu_3 is False and buy_target_4 < now_mesu['close'] <= buy_target_3:
                upbit.buy_limit_order(mesu_find, buy_target_3, buy_number_3)
                print(upbit.buy_limit_order(mesu_find, buy_target_3, buy_number_3)
                while True:
                    if upbit.get_order(mesu_find) == {
                        'error': {'message': 'Jwt의 query를 검증하는데 실패하였습니다.', 'name': 'invalid_query_payload'}}:

                        print(
                            f"현재시간: {now} 목표가:{buy_target3} ma20: {mesu_criteria} 보유 개수 : {buy_number_3} 형태 : {'매수3'}")
                        logging.debug("%s의 %s번째 target 매수 (현재가 : %s, ma20 : %s ) %s" % (
                            mesu_find, 3, buy_target_3, mesu_criteria, now))
                        mesu_3 = True
                        break
                    else:
                        print("매수 타겟 미체결")
                        time.sleep(1)

            if mesu_4 is False and buy_target_5 < now_mesu['close'] <= buy_target_4:
                upbit.buy_limit_order(mesu_find, buy_target_4, buy_number_4)
                print(upbit.buy_limit_order(mesu_find, buy_target_4, buy_number_4)
                while True:
                    if upbit.get_order(mesu_find) == {
                        'error': {'message': 'Jwt의 query를 검증하는데 실패하였습니다.', 'name': 'invalid_query_payload'}}:

                        print(
                            f"현재시간: {now} 목표가:{buy_target_4} ma20: {mesu_criteria} 보유 개수 : {buy_number_4} 형태 : {'매수4'}")
                        logging.debug("%s의 %s번째 target 매수 (현재가 : %s, ma20 : %s ) %s" % (
                            mesu_find, 4, buy_target_2, mesu_criteria, now))
                        mesu_4 = True
                        break
                    else:
                        print("매수 타겟 미체결")
                        time.sleep(1)

            if mesu_5 is False and buy_target_6 < now_mesu['close'] <= buy_target_5:
                upbit.buy_limit_order(mesu_find, buy_target_5, buy_number_5)
                print(upbit.buy_limit_order(mesu_find, buy_target_5, buy_number_5)
                while True:
                    if upbit.get_order(mesu_find) == {
                        'error': {'message': 'Jwt의 query를 검증하는데 실패하였습니다.', 'name': 'invalid_query_payload'}}:

                        print(
                            f"현재시간: {now} 목표가:{buy_target_5} ma20: {mesu_criteria} 보유 개수 : {buy_number_5} 형태 : {'매수5'}")
                        logging.debug("%s의 %s번째 target 매수 (현재가 : %s, ma20 : %s ) %s" % (
                            mesu_find, 5, buy_target_5, mesu_criteria, now))
                        mesu_5 = True
                        break
                    else:
                        print("매수 타겟 미체결")
                        time.sleep(1)

            if mesu_6 is False and buy_target_7 < now_mesu['close'] <= buy_target_6:
                upbit.buy_limit_order(mesu_find, buy_target_6, buy_number_6)
                print(upbit.buy_limit_order(mesu_find, buy_target_6, buy_number_6)
                while True:
                    if upbit.get_order(mesu_find) == {
                        'error': {'message': 'Jwt의 query를 검증하는데 실패하였습니다.', 'name': 'invalid_query_payload'}}:

                        print(
                            f"현재시간: {now} 목표가:{buy_target_6} ma20: {mesu_criteria} 보유 개수 : {buy_number_6} 형태 : {'매수6'}")
                        logging.debug("%s의 %s번째 target 매수 (현재가 : %s, ma20 : %s ) %s" % (
                            mesu_find, 6, buy_target_6, mesu_criteria, now))
                        mesu_6 = True
                        break
                    else:
                        print("매수 타겟 미체결")
                        time.sleep(1)

            if mesu_7 is False and buy_target_8 < now_mesu['close'] <= buy_target_7:
                upbit.buy_limit_order(mesu_find, buy_target_7, buy_number_7)
                print(upbit.buy_limit_order(mesu_find, buy_target_7, buy_number_7)
                while True:
                    if upbit.get_order(mesu_find) == {
                        'error': {'message': 'Jwt의 query를 검증하는데 실패하였습니다.', 'name': 'invalid_query_payload'}}:

                        print(
                            f"현재시간: {now} 목표가:{buy_target_7} ma20: {mesu_criteria} 보유 개수 : {buy_number_7} 형태 : {'매수7'}")
                        logging.debug("%s의 %s번째 target 매수 (현재가 : %s, ma20 : %s ) %s" % (
                            mesu_find, 7, buy_target_7, mesu_criteria, now))
                        mesu_7 = True
                        break
                    else:
                        print("매수 타겟 미체결")
                        time.sleep(1)

            if mesu_8 is False and buy_target_9 < now_mesu['close'] <= buy_target_8:
                upbit.buy_limit_order(mesu_find, buy_target_8, buy_number_8)
                print(upbit.buy_limit_order(mesu_find, buy_target_8, buy_number_8)
                while True:
                    if upbit.get_order(mesu_find) == {
                        'error': {'message': 'Jwt의 query를 검증하는데 실패하였습니다.', 'name': 'invalid_query_payload'}}:

                        print(
                            f"현재시간: {now} 목표가:{buy_target_8} ma20: {mesu_criteria} 보유 개수 : {buy_number_8} 형태 : {'매수8'}")
                        logging.debug("%s의 %s번째 target 매수 (현재가 : %s, ma20 : %s ) %s" % (
                            mesu_find, 8, buy_target_8, mesu_criteria, now))
                        mesu_8 = True
                        break
                    else:
                        print("매수 타겟 미체결")
                        time.sleep(1)

            if mesu_9 is False and buy_target_10 < now_mesu['close'] <= buy_target_9:
                upbit.buy_limit_order(mesu_find, buy_target_9, buy_number_9)
                print(upbit.buy_limit_order(mesu_find, buy_target_9, buy_number_9)
                while True:
                    if upbit.get_order(mesu_find) == {
                        'error': {'message': 'Jwt의 query를 검증하는데 실패하였습니다.', 'name': 'invalid_query_payload'}}:

                        print(
                            f"현재시간: {now} 목표가:{buy_target_9} ma20: {mesu_criteria} 보유 개수 : {buy_number_2} 형태 : {'매수9'}")
                        logging.debug("%s의 %s번째 target 매수 (현재가 : %s, ma20 : %s ) %s" % (
                            mesu_find, 9, buy_target_9, mesu_criteria, now))
                        mesu_9 = True
                        break
                    else:
                        print("매수 타겟 미체결")
                        time.sleep(1)

            if mesu_10 is False and now_mesu['close'] <= buy_target_10:
                upbit.buy_limit_order(mesu_find, buy_target_10, buy_number_10)
                print(upbit.buy_limit_order(mesu_find, buy_target_10, buy_number_10)
                while True:
                    if upbit.get_order(mesu_find) == {
                        'error': {'message': 'Jwt의 query를 검증하는데 실패하였습니다.', 'name': 'invalid_query_payload'}}:

                        print(
                            f"현재시간: {now} 목표가:{buy_target_10} ma20: {mesu_criteria} 보유 개수 : {buy_number_10} 형태 : {'매수10'}")
                        logging.debug("%s의 %s번째 target 매수 (현재가 : %s, ma20 : %s ) %s" % (
                            mesu_find, 10, buy_target_10, mesu_criteria, now))
                        mesu_10 = True
                        break
                    else:
                        print("매수 타겟 미체결")
                        time.sleep(1)
            ## 매도 구간


            if mesu_10 is True and sell_target_10 <= now_mesu['close'] < sell_target_9:
                upbit.sell_limit_order(mesu_find, sell_target_10, sell_number_10)
                print(upbit.sell_limit_order(mesu_find, sell_target_10, sell_number_10)
                while True:
                    if upbit.get_order(mesu_find) == {
                        'error': {'message': 'Jwt의 query를 검증하는데 실패하였습니다.', 'name': 'invalid_query_payload'}}:

                        print(
                            f"현재시간: {now} 목표가:{sell_target_10} ma20: {mesu_criteria} 보유 개수 : {sell_number_10} 형태 : {'매도10'}")
                        logging.debug("%s의 %s번째 target 매도 (현재가 : %s, ma20 : %s ) %s" % (
                            mesu_find, 10, sell_target_10, mesu_criteria, now))
                        mesu_10 = False
                        break
                    else:
                        print("매수 타겟 미체결")
                        time.sleep(1)

            if mesu_9 is True and sell_target_9 <= now_mesu['close'] < sell_target_8:
                upbit.sell_limit_order(mesu_find, sell_target_9, sell_number_9)
                print(upbit.sell_limit_order(mesu_find, sell_target_9, sell_number_9)
                while True:
                    if upbit.get_order(mesu_find) == {
                        'error': {'message': 'Jwt의 query를 검증하는데 실패하였습니다.', 'name': 'invalid_query_payload'}}:

                        print(
                            f"현재시간: {now} 목표가:{sell_target_9} ma20: {mesu_criteria} 보유 개수 : {sell_number_9} 형태 : {'매도9'}")
                        logging.debug("%s의 %s번째 target 매도 (현재가 : %s, ma20 : %s ) %s" % (
                            mesu_find, 9, sell_target_9, mesu_criteria, now))
                        mesu_9 = False
                        break
                    else:
                        print("매수 타겟 미체결")
                        time.sleep(1)

            if mesu_8 is True and sell_target_8 <= now_mesu['close'] < sell_target_7:
                upbit.sell_limit_order(mesu_find, sell_target_8, sell_number_8)
                print(upbit.sell_limit_order(mesu_find, sell_target_8, sell_number_8)
                while True:
                    if upbit.get_order(mesu_find) == {
                        'error': {'message': 'Jwt의 query를 검증하는데 실패하였습니다.', 'name': 'invalid_query_payload'}}:

                        print(
                            f"현재시간: {now} 목표가:{sell_target_8} ma20: {mesu_criteria} 보유 개수 : {sell_number_8} 형태 : {'매도8'}")
                        logging.debug("%s의 %s번째 target 매도 (현재가 : %s, ma20 : %s ) %s" % (
                            mesu_find, 8, sell_target_8, mesu_criteria, now))
                        mesu_8 = False
                        break
                    else:
                        print("매수 타겟 미체결")
                        time.sleep(1)

            if mesu_7 is True and sell_target_7 <= now_mesu['close'] < sell_target_6:
                upbit.sell_limit_order(mesu_find, sell_target_7, sell_number_7)
                print(upbit.sell_limit_order(mesu_find, sell_target_7, sell_number_7)
                while True:
                    if upbit.get_order(mesu_find) == {
                        'error': {'message': 'Jwt의 query를 검증하는데 실패하였습니다.', 'name': 'invalid_query_payload'}}:

                        print(
                            f"현재시간: {now} 목표가:{sell_target_7} ma20: {mesu_criteria} 보유 개수 : {sell_number_7} 형태 : {'매도7'}")
                        logging.debug("%s의 %s번째 target 매도 (현재가 : %s, ma20 : %s ) %s" % (
                            mesu_find, 7, sell_target_7, mesu_criteria, now))
                        mesu_7 = False
                        break
                    else:
                        print("매수 타겟 미체결")
                        time.sleep(1)
            if mesu_6 is True and sell_target_6 <= now_mesu['close'] < sell_target_5:
                upbit.sell_limit_order(mesu_find, sell_target_6, sell_number_6)
                print(upbit.sell_limit_order(mesu_find, sell_target_6, sell_number_6)
                while True:
                    if upbit.get_order(mesu_find) == {
                        'error': {'message': 'Jwt의 query를 검증하는데 실패하였습니다.', 'name': 'invalid_query_payload'}}:

                        print(
                            f"현재시간: {now} 목표가:{sell_target_6} ma20: {mesu_criteria} 보유 개수 : {sell_number_6} 형태 : {'매도6'}")
                        logging.debug("%s의 %s번째 target 매도 (현재가 : %s, ma20 : %s ) %s" % (
                            mesu_find, 6, sell_target_6, mesu_criteria, now))
                        mesu_6 = False
                        break
                    else:
                        print("매수 타겟 미체결")
                        time.sleep(1)
            if mesu_5 is True and sell_target_5 <= now_mesu['close'] < sell_target_6:
                upbit.sell_limit_order(mesu_find, sell_target_5, sell_number_5)
                print(upbit.sell_limit_order(mesu_find, sell_target_5, sell_number_5)
                while True:
                    if upbit.get_order(mesu_find) == {
                        'error': {'message': 'Jwt의 query를 검증하는데 실패하였습니다.', 'name': 'invalid_query_payload'}}:

                        print(
                            f"현재시간: {now} 목표가:{sell_target_5} ma20: {mesu_criteria} 보유 개수 : {sell_number_5} 형태 : {'매도5'}")
                        logging.debug("%s의 %s번째 target 매도 (현재가 : %s, ma20 : %s ) %s" % (
                            mesu_find, 5, sell_target_5, mesu_criteria, now))
                        mesu_5 = False
                        break
                    else:
                        print("매수 타겟 미체결")
                        time.sleep(1)
            if mesu_4 is True and sell_target_4 <= now_mesu['close'] < sell_target_5:
                upbit.sell_limit_order(mesu_find, sell_target_4, sell_number_4)
                print(upbit.sell_limit_order(mesu_find, sell_target_4, sell_number_4)
                while True:
                    if upbit.get_order(mesu_find) == {
                        'error': {'message': 'Jwt의 query를 검증하는데 실패하였습니다.', 'name': 'invalid_query_payload'}}:

                        print(
                            f"현재시간: {now} 목표가:{sell_target_4} ma20: {mesu_criteria} 보유 개수 : {sell_number_4} 형태 : {'매도4'}")
                        logging.debug("%s의 %s번째 target 매도 (현재가 : %s, ma20 : %s ) %s" % (
                            mesu_find, 4, sell_target_4, mesu_criteria, now))
                        mesu_4 = False
                        break
                    else:
                        print("매수 타겟 미체결")
                        time.sleep(1)
            if mesu_3 is True and sell_target_3 <= now_mesu['close'] < sell_target_4:
                upbit.sell_limit_order(mesu_find, sell_target_3, sell_number_3)
                print(upbit.sell_limit_order(mesu_find, sell_target_3, sell_number_3)
                while True:
                    if upbit.get_order(mesu_find) == {
                        'error': {'message': 'Jwt의 query를 검증하는데 실패하였습니다.', 'name': 'invalid_query_payload'}}:

                        print(
                            f"현재시간: {now} 목표가:{sell_target_3} ma20: {mesu_criteria} 보유 개수 : {sell_number_3} 형태 : {'매도3'}")
                        logging.debug("%s의 %s번째 target 매도 (현재가 : %s, ma20 : %s ) %s" % (
                            mesu_find,3, sell_target_3, mesu_criteria, now))
                        mesu_3 = False
                        break
                    else:
                        print("매수 타겟 미체결")
                        time.sleep(1)
            if mesu_2 is True and sell_target_2 <= now_mesu['close'] < sell_target_3:
                upbit.sell_limit_order(mesu_find, sell_target_2, sell_number_2)
                print(upbit.sell_limit_order(mesu_find, sell_target_2, sell_number_2)
                while True:
                    if upbit.get_order(mesu_find) == {
                        'error': {'message': 'Jwt의 query를 검증하는데 실패하였습니다.', 'name': 'invalid_query_payload'}}:

                        print(
                            f"현재시간: {now} 목표가:{sell_target_2} ma20: {mesu_criteria} 보유 개수 : {sell_number_2} 형태 : {'매도2'}")
                        logging.debug("%s의 %s번째 target 매도 (현재가 : %s, ma20 : %s ) %s" % (
                            mesu_find, 2, sell_target_2, mesu_criteria, now))
                        mesu_2 = False
                        break
                    else:
                        print("매수 타겟 미체결")
                        time.sleep(1)
            if mesu_1 is True and sell_target_1 <= now_mesu['close'] < sell_target_2:
                upbit.sell_limit_order(mesu_find, sell_target_1, sell_number_1)
                print(upbit.sell_limit_order(mesu_find, sell_target_1, sell_number_1)
                while True:
                    if upbit.get_order(mesu_find) == {
                        'error': {'message': 'Jwt의 query를 검증하는데 실패하였습니다.', 'name': 'invalid_query_payload'}}:

                        print(
                            f"현재시간: {now} 목표가:{sell_target_1} ma20: {mesu_criteria} 보유 개수 : {sell_number_1} 형태 : {'매도1'}")
                        logging.debug("%s의 %s번째 target 매도 (현재가 : %s, ma20 : %s ) %s" % (
                            mesu_find, 1, sell_target_1, mesu_criteria, now))
                        mesu_1 = False
                        break
                    else:
                        print("매수 타겟 미체결")
                        time.sleep(1)

        hold = False

    op_mode = False
    time.sleep(10)

